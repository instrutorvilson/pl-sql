Encontro 4 ‚Äì Triggers e Tratamento de Exce√ß√µes (4h)
Objetivos
Entender e criar triggers (gatilhos) em PL/SQL.

Diferenciar tipos de triggers (row-level, statement-level, before, after, instead of).

Aplicar tratamento de exce√ß√µes em blocos PL/SQL.


Criar exce√ß√µes personalizadas com RAISE_APPLICATION_ERROR.


1. Introdu√ß√£o √†s Triggers
Uma trigger √© um bloco PL/SQL que √© automaticamente executado em resposta a um evento em uma tabela (como INSERT, UPDATE ou DELETE).
Sintaxe b√°sica
CREATE [OR REPLACE] TRIGGER nome_trigger
[BEFORE | AFTER | INSTEAD OF]
[INSERT | UPDATE | DELETE]
ON nome_tabela
[FOR EACH ROW]
BEGIN
  -- corpo da trigger
END;

2. Tipos de Triggers
Tipo
Descri√ß√£o
N√≠vel
BEFORE
Executa antes do evento.
Row-level ou Statement-level
AFTER
Executa depois do evento.
Row-level ou Statement-level
INSTEAD OF
Substitui a a√ß√£o (usado em views).
Statement-level
FOR EACH ROW
Executa uma vez para cada linha afetada.
Row-level
(sem FOR EACH ROW)
Executa uma vez por comando DML.
Statement-level


 3. Exemplo pr√°tico ‚Äì Trigger de auditoria
 Tabelas base
CREATE TABLE empregados (
  id NUMBER PRIMARY KEY,
  nome VARCHAR2(50),
  cargo VARCHAR2(30),
  salario NUMBER(10,2)
);

CREATE TABLE log_emp (
  id_log NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
  id_emp NUMBER,
  acao VARCHAR2(20),
  data_acao DATE
);

Trigger de log
CREATE OR REPLACE TRIGGER trg_log_emp
AFTER INSERT ON empregados
FOR EACH ROW
BEGIN
  INSERT INTO log_emp (id_emp, acao, data_acao)
  VALUES (:NEW.id, 'INSERIDO', SYSDATE);
END;
/

Explica√ß√£o:
:NEW ‚Üí representa o valor novo do registro.


:OLD ‚Üí representa o valor antigo (antes da altera√ß√£o).


4. Trigger BEFORE UPDATE ‚Äì Auditoria de altera√ß√µes
CREATE OR REPLACE TRIGGER trg_audita_update
BEFORE UPDATE ON empregados
FOR EACH ROW
BEGIN
  INSERT INTO log_emp (id_emp, acao, data_acao)
  VALUES (:OLD.id, 'ATUALIZADO', SYSDATE);
END;
/

5. Trigger que impede exclus√£o de gerente
CREATE OR REPLACE TRIGGER trg_no_delete_gerente
BEFORE DELETE ON empregados
FOR EACH ROW
BEGIN
  IF :OLD.cargo = 'GERENTE' THEN
    RAISE_APPLICATION_ERROR(-20001, 'N√£o √© permitido excluir um gerente!');
  END IF;
END;
/


6. Tratamento de Exce√ß√µes em PL/SQL
 Estrutura
BEGIN
  -- c√≥digo principal
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('Nenhum registro encontrado.');
  WHEN TOO_MANY_ROWS THEN
    DBMS_OUTPUT.PUT_LINE('Mais de um registro retornado.');
  WHEN ZERO_DIVIDE THEN
    DBMS_OUTPUT.PUT_LINE('Erro: divis√£o por zero.');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Erro inesperado: ' || SQLERRM);
END;
/


7. Exce√ß√µes Personalizadas
Voc√™ pode criar mensagens personalizadas usando:
RAISE_APPLICATION_ERROR(-20000, 'Mensagem personalizada');

 Exemplo:
BEGIN
  IF 100 / 0 = 0 THEN
    NULL;
  END IF;
EXCEPTION
  WHEN ZERO_DIVIDE THEN
    RAISE_APPLICATION_ERROR(-20010, 'Opera√ß√£o inv√°lida: divis√£o por zero!');
END;
/


8. Exemplo completo ‚Äì Trigger com exce√ß√£o personalizada
CREATE OR REPLACE TRIGGER trg_valida_salario
BEFORE INSERT OR UPDATE ON empregados
FOR EACH ROW
BEGIN
  IF :NEW.salario < 1500 THEN
    RAISE_APPLICATION_ERROR(-20011, 'Sal√°rio abaixo do permitido!');
  END IF;
END;
/

 Atividades Pr√°ticas
Exerc√≠cio 1 ‚Äì Trigger de auditoria
Crie uma trigger que registre em uma tabela log_salarios toda vez que um sal√°rio for alterado, armazenando:
id_emp


salario_antigo


salario_novo


data_alteracao


üí° Dica: use :OLD.salario e :NEW.salario.
Exerc√≠cio 2 ‚Äì Impedir exclus√£o de gerentes
Crie uma trigger que bloqueie exclus√µes de empregados com cargo 'GERENTE'.
üí° Dica: utilize BEFORE DELETE e RAISE_APPLICATION_ERROR.
Exerc√≠cio 3 ‚Äì Tratamento de exce√ß√µes
Crie um bloco PL/SQL que:
Busque um funcion√°rio por ID.


Se n√£o encontrar, exiba uma mensagem ‚ÄúEmpregado n√£o encontrado‚Äù.


Caso retorne mais de um, exiba ‚ÄúMais de um resultado encontrado‚Äù.


Exerc√≠cio 4 ‚Äì Exce√ß√£o personalizada
Crie um bloco PL/SQL que:
Solicite um n√∫mero.


Se for menor que zero, gere uma exce√ß√£o personalizada RAISE_APPLICATION_ERROR(-20020, 'N√∫mero negativo n√£o permitido.')

