Encontro 5 ‚Äì Packages, Cursores Avan√ßados e Projeto Final (4h)
Objetivos
Entender e criar packages (pacotes) no Oracle.


Utilizar cursores parametrizados.


Consolidar o aprendizado atrav√©s de um mini-projeto pr√°tico integrador.


1. Conceito de Packages
Um package √© um conjunto l√≥gico de objetos PL/SQL (procedures, functions, vari√°veis, cursores) agrupados em um mesmo m√≥dulo.
Ele √© dividido em duas partes:
Parte
Descri√ß√£o
Specification (Spec)
Declara√ß√£o p√∫blica dos objetos (assinaturas de procedures/functions, tipos, vari√°veis p√∫blicas).
Body
Implementa√ß√£o dos objetos declarados no spec. Pode conter elementos privados.

Vantagens
Modulariza√ß√£o do c√≥digo (organiza√ß√£o por tema).


Encapsulamento de l√≥gica (oculta detalhes da implementa√ß√£o).


Melhora o desempenho (carregado uma vez na mem√≥ria).


Facilita manuten√ß√£o e reuso.


2. Estrutura de um Package
üî∏ Specification
CREATE OR REPLACE PACKAGE pkg_funcionarios AS
PROCEDURE inserir_func(p_nome VARCHAR2, p_salario NUMBER);
PROCEDURE atualizar_func(p_id NUMBER, p_salario NUMBER);
FUNCTION calcular_bonus(p_id NUMBER) RETURN NUMBER;
END pkg_funcionarios

üî∏ Body
CREATE OR REPLACE PACKAGE BODY pkg_funcionarios AS
  PROCEDURE inserir_func(p_nome VARCHAR2, p_salario NUMBER, p_departamento VARCHAR2) IS
BEGIN
  //implementa√ß√£o da procedure
  END inserir_func;

  PROCEDURE atualizar_func(p_id NUMBER, p_salario NUMBER) IS
  BEGIN
     //implementa√ß√£o da fun√ß√£o
  END atualizar_func;

  FUNCTION calcular_bonus(p_id NUMBER) RETURN NUMBER IS
    v_salario funcionarios.salario%TYPE;
  BEGIN
    //implementa√ß√£o da fun√ß√£o
  END calcular_bonus;
END pkg_funcionarios;

3. Cursores Parametrizados
Permitem filtrar resultados dinamicamente, passando par√¢metros na declara√ß√£o do cursor.
Exemplo:
DECLARE
  CURSOR c_func(p_departamento VARCHAR2) IS
    SELECT nome, salario
    FROM funcionarios
    WHERE departamento = p_departamento;

  v_nome funcionarios.nome%TYPE;
  v_salario funcionarios.salario%TYPE;
BEGIN
  OPEN c_func('Vendas');
  LOOP
    FETCH c_func INTO v_nome, v_salario;
    EXIT WHEN c_func%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(v_nome || ' - ' || v_salario);
  END LOOP;
  CLOSE c_func;
END;

 4. Projeto Pr√°tico Integrador ‚Äì Sistema de Controle de Funcion√°rios
Descri√ß√£o
Crie um sistema completo em PL/SQL para gerenciar funcion√°rios, aplicando procedures, fun√ß√µes, triggers e packages.
Estrutura das Tabelas
CREATE TABLE funcionarios (
  id_func NUMBER PRIMARY KEY,
  nome VARCHAR2(100),
  salario NUMBER(10,2),
  departamento VARCHAR2(50),
  data_admissao DATE DEFAULT SYSDATE
);

CREATE TABLE log_auditoria (
  id_log NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  acao VARCHAR2(30),
  id_func NUMBER,
  data_log DATE DEFAULT SYSDATE
);

CREATE SEQUENCE seq_func START WITH 1 INCREMENT BY 1;

INSERT INTO funcionarios (id_func, nome, salario, departamento, data_admissao) VALUES (seq_func.NEXTVAL, 'Carlos Silva', 3500, 'Vendas', DATE '2022-03-10');
INSERT INTO funcionarios (id_func, nome, salario, departamento, data_admissao) VALUES (seq_func.NEXTVAL, 'Ana Souza', 4200, 'TI', DATE '2021-08-05');
INSERT INTO funcionarios (id_func, nome, salario, departamento, data_admissao) VALUES (seq_func.NEXTVAL, 'Marcos Lima', 2800, 'Financeiro', DATE '2023-02-20');
INSERT INTO funcionarios (id_func, nome, salario, departamento, data_admissao) VALUES (seq_func.NEXTVAL, 'Juliana Rocha', 4600, 'TI', DATE '2020-11-15');
INSERT INTO funcionarios (id_func, nome, salario, departamento, data_admissao) VALUES (seq_func.NEXTVAL, 'Fernanda Alves', 3200, 'Vendas', DATE '2024-01-12');

 Projeto Final (avaliativo)
Crie um package completo chamado pkg_gestao_func que implemente:
Procedure para inserir funcion√°rio.


Procedure para aumentar sal√°rio com base em um percentual.


Fun√ß√£o que calcula o tempo de casa (anos) de um funcion√°rio.


Procedure que lista funcion√°rios com cursores parametrizados (por departamento).


Utilize uma trigger para registrar todas as altera√ß√µes no log.





